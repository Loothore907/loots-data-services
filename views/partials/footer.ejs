</div><!-- End of main-content -->
  
<!-- Footer -->
<footer class="footer mt-auto py-3 bg-dark text-white">
  <div class="container">
    <div class="row">
      <div class="col-md-6">
        <p class="mb-0">&copy; <%= new Date().getFullYear() %> Loot's Ganja Guide</p>
      </div>
      <div class="col-md-6 text-md-end">
        <p class="mb-0">Version 0.1.0</p>
      </div>
    </div>
  </div>
</footer>

<!-- Help Modal -->
<div class="modal fade" id="helpModal" tabindex="-1" aria-labelledby="helpModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="helpModalLabel">Admin Dashboard Help</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <h5>Quick Start Guide</h5>
        <p>This dashboard allows you to manage vendor data for Loot's Ganja Guide cannabis app.</p>
        
        <div class="accordion" id="helpAccordion">
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingVendors">
              <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseVendors">
                Vendor Management
              </button>
            </h2>
            <div id="collapseVendors" class="accordion-collapse collapse show" aria-labelledby="headingVendors" data-bs-parent="#helpAccordion">
              <div class="accordion-body">
                <p><strong>Adding a vendor:</strong> Click "Vendors" in the navigation, then "Add New Vendor".</p>
                <p><strong>Editing a vendor:</strong> Find the vendor in the list and click the edit (pencil) icon.</p>
                <p><strong>Deleting a vendor:</strong> Find the vendor and click the delete (trash) icon, then confirm.</p>
                <p><strong>Setting coordinates:</strong> Use the map on the edit form or click the "Geocode" button to automatically get coordinates from the address.</p>
              </div>
            </div>
          </div>
          
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingWorkflows">
              <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWorkflows">
                Workflows
              </button>
            </h2>
            <div id="collapseWorkflows" class="accordion-collapse collapse" aria-labelledby="headingWorkflows" data-bs-parent="#helpAccordion">
              <div class="accordion-body">
                <p><strong>Import & Normalize:</strong> Upload vendor data from CSV/JSON and normalize to app schema.</p>
                <p><strong>Geocode Vendors:</strong> Convert addresses to latitude/longitude coordinates.</p>
                <p><strong>Process Priority Regions:</strong> Process vendors in priority regions, clean addresses and validate coordinates.</p>
                <p><strong>Sync to Firebase:</strong> Push processed data to the live database.</p>
              </div>
            </div>
          </div>
          
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingTips">
              <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTips">
                Tips & Tricks
              </button>
            </h2>
            <div id="collapseTips" class="accordion-collapse collapse" aria-labelledby="headingTips" data-bs-parent="#helpAccordion">
              <div class="accordion-body">
                <ul>
                  <li>Use the dashboard for a quick overview of data health.</li>
                  <li>Filter vendors by status or region to find specific groups.</li>
                  <li>Workflows run in the background - you can close the page and check back later.</li>
                  <li>Always validate coordinates for map accuracy.</li>
                  <li>The system automatically archives revoked vendors.</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<!-- Notifications Script -->
<script>
  // Simple notification system
  const notifications = {
    show: function(message, type = 'info', duration = 5000) {
      const container = document.querySelector('.toast-container');
      const toast = document.createElement('div');
      
      // Create a unique ID for this toast
      const toastId = 'toast-' + Date.now();
      
      // Create toast HTML
      toast.className = 'toast show';
      toast.id = toastId;
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="toast-header bg-${type} text-white">
          <strong class="me-auto">Notification</strong>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      `;
      
      // Add to container
      container.appendChild(toast);
      
      // Auto remove after duration
      setTimeout(() => {
        const toastElement = document.getElementById(toastId);
        if (toastElement) {
          toastElement.remove();
        }
      }, duration);
      
      return toastId;
    },
    
    success: function(message, duration) {
      return this.show(message, 'success', duration);
    },
    
    error: function(message, duration) {
      return this.show(message, 'danger', duration);
    },
    
    warning: function(message, duration) {
      return this.show(message, 'warning', duration);
    },
    
    info: function(message, duration) {
      return this.show(message, 'info', duration);
    }
  };
  
  // Check for URL query params to show notifications
  document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    
    if (urlParams.has('success')) {
      notifications.success(urlParams.get('success'));
      // Remove param from URL without reload
      window.history.replaceState({}, document.title, window.location.pathname);
    }
    
    if (urlParams.has('error')) {
      notifications.error(urlParams.get('error'));
      // Remove param from URL without reload
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  });
</script>
</body>
</html>