<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Loot's Ganja Guide - Data Processor</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .processing-container {
      display: none;
    }
    .step {
      margin-bottom: 10px;
      padding: 10px;
      border-radius: 4px;
      background-color: #f8f9fa;
    }
    .step.active {
      background-color: #e9ecef;
      border-left: 4px solid #0d6efd;
    }
    .step.completed {
      background-color: #d1e7dd;
      border-left: 4px solid #198754;
    }
    .step.error {
      background-color: #f8d7da;
      border-left: 4px solid #dc3545;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <h1 class="mb-4">Loot's Ganja Guide - Vendor Data Processor</h1>
    
    <div class="upload-container">
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">Upload Vendor Data</h5>
          <form id="uploadForm" enctype="multipart/form-data">
            <div class="mb-3">
              <label for="vendorFile" class="form-label">Vendor Data File (JSON)</label>
              <input class="form-control" type="file" id="vendorFile" name="vendorFile" accept=".json" required>
            </div>
            
            <div class="mb-3">
              <label class="form-label">Sync Mode</label>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="syncMode" id="overwriteMode" value="overwrite" checked>
                <label class="form-check-label" for="overwriteMode">
                  Overwrite - Replace existing data
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="syncMode" id="appendMode" value="append">
                <label class="form-check-label" for="appendMode">
                  Append - Add new vendors only
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="syncMode" id="updateMode" value="update">
                <label class="form-check-label" for="updateMode">
                  Update - Merge with existing data
                </label>
              </div>
            </div>
            
            <button type="submit" class="btn btn-primary">Start Processing</button>
          </form>
        </div>
      </div>
    </div>
    
    <div class="processing-container mt-4">
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">Processing Status</h5>
          <div class="progress mb-3">
            <div class="progress-bar progress-bar-striped progress-bar-animated" id="progressBar" role="progressbar" style="width: 0%"></div>
          </div>
          
          <div class="steps-container">
            <div class="step" id="step1">
              <h6>1. Import & Normalize</h6>
              <p class="status">Waiting to start...</p>
            </div>
            
            <div class="step" id="step2">
              <h6>2. Geocode Addresses</h6>
              <p class="status">Waiting to start...</p>
            </div>
            
            <div class="step" id="step3">
              <h6>3. Transform Schema</h6>
              <p class="status">Waiting to start...</p>
            </div>
            
            <div class="step" id="step4">
              <h6>4. Sync to Firebase</h6>
              <p class="status">Waiting to start...</p>
            </div>
          </div>
          
          <div class="results-container mt-3" style="display: none;">
            <h6>Processing Results</h6>
            <table class="table table-bordered">
              <tbody>
                <tr>
                  <th>Total Vendors</th>
                  <td id="totalVendors">-</td>
                </tr>
                <tr>
                  <th>Successfully Geocoded</th>
                  <td id="geocodedVendors">-</td>
                </tr>
                <tr>
                  <th>Failed Geocoding</th>
                  <td id="failedVendors">-</td>
                </tr>
                <tr>
                  <th>Synced to Firebase</th>
                  <td id="syncedVendors">-</td>
                </tr>
              </tbody>
            </table>
            
            <div id="errorContainer" class="alert alert-danger mt-3" style="display: none;"></div>
            
            <div class="mt-3">
              <a id="downloadFailed" class="btn btn-outline-secondary" style="display: none;">Download Failed Vendors</a>
              <button id="newProcess" class="btn btn-primary">Process New File</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const uploadForm = document.getElementById('uploadForm');
      const uploadContainer = document.querySelector('.upload-container');
      const processingContainer = document.querySelector('.processing-container');
      const progressBar = document.getElementById('progressBar');
      const resultsContainer = document.querySelector('.results-container');
      const downloadFailed = document.getElementById('downloadFailed');
      const newProcess = document.getElementById('newProcess');
      
      let currentJobId = null;
      
      uploadForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(uploadForm);
        
        // Show processing UI
        uploadContainer.style.display = 'none';
        processingContainer.style.display = 'block';
        
        // Set step 1 as active
        document.getElementById('step1').classList.add('active');
        document.getElementById('step1').querySelector('.status').textContent = 'Importing vendor data...';
        
        // Update progress bar
        progressBar.style.width = '10%';
        
        // Submit the form data
        fetch('/process', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            currentJobId = data.jobId;
            simulateProcessing(data.jobId);
          } else {
            showError(data.error || 'Unknown error occurred');
          }
        })
        .catch(error => {
          showError('Failed to start processing: ' + error.message);
        });
      });
      
      function simulateProcessing(jobId) {
        // In a real implementation, you would poll the server for job status
        // This is a simplified simulation for demonstration
        
        // Step 1: Import & Normalize (10% -> 25%)
        setTimeout(() => {
          document.getElementById('step1').classList.remove('active');
          document.getElementById('step1').classList.add('completed');
          document.getElementById('step1').querySelector('.status').textContent = 'Completed';
          
          document.getElementById('step2').classList.add('active');
          document.getElementById('step2').querySelector('.status').textContent = 'Geocoding addresses...';
          
          progressBar.style.width = '25%';
        }, 2000);
        
        // Step 2: Geocode (25% -> 60%)
        setTimeout(() => {
          document.getElementById('step2').classList.remove('active');
          document.getElementById('step2').classList.add('completed');
          document.getElementById('step2').querySelector('.status').textContent = 'Completed';
          
          document.getElementById('step3').classList.add('active');
          document.getElementById('step3').querySelector('.status').textContent = 'Transforming data schema...';
          
          progressBar.style.width = '60%';
        }, 5000);
        
        // Step 3: Transform (60% -> 75%)
        setTimeout(() => {
          document.getElementById('step3').classList.remove('active');
          document.getElementById('step3').classList.add('completed');
          document.getElementById('step3').querySelector('.status').textContent = 'Completed';
          
          document.getElementById('step4').classList.add('active');
          document.getElementById('step4').querySelector('.status').textContent = 'Syncing to Firebase...';
          
          progressBar.style.width = '75%';
        }, 6500);
        
        // Step 4: Sync (75% -> 100%)
        setTimeout(() => {
          document.getElementById('step4').classList.remove('active');
          document.getElementById('step4').classList.add('completed');
          document.getElementById('step4').querySelector('.status').textContent = 'Completed';
          
          progressBar.style.width = '100%';
          progressBar.classList.remove('progress-bar-animated');
          
          // Show results (with dummy data for demo)
          document.getElementById('totalVendors').textContent = '243';
          document.getElementById('geocodedVendors').textContent = '124';
          document.getElementById('failedVendors').textContent = '119';
          document.getElementById('syncedVendors').textContent = '124';
          
          resultsContainer.style.display = 'block';
          downloadFailed.style.display = 'inline-block';
        }, 8000);
      }
      
      function showError(message) {
        const errorContainer = document.getElementById('errorContainer');
        errorContainer.textContent = message;
        errorContainer.style.display = 'block';
        resultsContainer.style.display = 'block';
        
        progressBar.classList.remove('progress-bar-animated');
        progressBar.classList.add('bg-danger');
      }
      
      newProcess.addEventListener('click', function() {
        // Reset the UI
        uploadContainer.style.display = 'block';
        processingContainer.style.display = 'none';
        resultsContainer.style.display = 'none';
        progressBar.style.width = '0%';
        progressBar.classList.add('progress-bar-animated');
        progressBar.classList.remove('bg-danger');
        
        // Reset all steps
        document.querySelectorAll('.step').forEach(step => {
          step.classList.remove('active', 'completed', 'error');
          step.querySelector('.status').textContent = 'Waiting to start...';
        });
        
        // Reset the form
        uploadForm.reset();
      });
    });
  </script>
</body>
</html>